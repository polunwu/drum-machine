{"version":3,"sources":["DrumMachine.js","serviceWorker.js","index.js"],"names":["DrumMachine","props","state","title","display","nesURL","reactURL","nesColors","default","blue","red","orange","green","padList","1","id","keyCode","audioSrc","content","2","3","Q","W","E","A","S","D","Z","X","C","handleClick","bind","document","addEventListener","e","getElementById","String","fromCharCode","click","clickedProps","this","setState","padInfo","sound","currentTime","play","onended","class","React","Component","Title","Display","Footer","target","href","Pannel","color","DrumPad","classSet","onClick","src","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa5d540f.chunk.js","sourcesContent":["import React from 'react';\nimport './style.scss';\n\n// speakRefUrl: http://www.grsites.com/archive/sounds/category/27/?offset=0\nclass DrumMachine extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '# Drum Machine',\n      display: 'Make Some Beat!',\n      nesURL: 'https://nostalgic-css.github.io/NES.css/#',\n      reactURL: 'https://zh-hant.reactjs.org/',\n      nesColors: { default: '', blue: 'is-primary', red: 'is-error', orange: 'is-warning', green: 'is-success' },\n      padList: {\n        1: { id: '1', keyCode: 49, audioSrc: 'http://static1.grsites.com/archive/sounds/scifi/scifi025.mp3', content: 'Mothership Launching' },\n        2: { id: '2', keyCode: 50, audioSrc: 'http://static1.grsites.com/archive/sounds/scifi/scifi012.mp3', content: 'Hold Your Weapons' },\n        3: { id: '3', keyCode: 51, audioSrc: 'http://static1.grsites.com/archive/sounds/scifi/scifi035.mp3', content: 'Alien Onboard' },\n        Q: { id: 'Q', keyCode: 81, audioSrc: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3', content: 'Disc ~Oh!' },\n        W: { id: 'W', keyCode: 87, audioSrc: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3', content: 'tz!' },\n        E: { id: 'E', keyCode: 69, audioSrc: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3', content: 'STICK' },\n        A: { id: 'A', keyCode: 65, audioSrc: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3', content: 'KICK!!' },\n        S: { id: 'S', keyCode: 83, audioSrc: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3', content: 'KICK & HAT!' },\n        D: { id: 'D', keyCode: 68, audioSrc: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3', content: 'BREAK' },\n        Z: { id: 'Z', keyCode: 90, audioSrc: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3', content: '\\'\\'CLAP\\'\\'' },\n        X: { id: 'X', keyCode: 88, audioSrc: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3', content: 'PUNCHY!!!' },\n        C: { id: 'C', keyCode: 67, audioSrc: 'http://static1.grsites.com/archive/sounds/quotes/quotes001.mp3', content: '..Speak' }\n      }\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n  componentWillMount() {\n    document.addEventListener('keydown', (e) => {\n      switch (e.keyCode) {\n        case 49:\n        case 50:\n        case 51:\n        case 81:\n        case 87:\n        case 69:\n        case 65:\n        case 83:\n        case 68:\n        case 90:\n        case 88:\n        case 67:\n          document.getElementById(\"drum-pad-\" + String.fromCharCode(e.keyCode)).click();\n          break;\n        default:\n          break;\n      }\n    });\n  }\n  handleClick(e, clickedProps) {\n    this.setState({\n      display: clickedProps.padInfo.content\n    });\n    let sound = document.getElementById(clickedProps.padInfo.id);\n    sound.currentTime = 0;\n    sound.play();\n    sound.onended = () => {\n      this.setState({\n        display: 'Make Some Beat!'\n      });\n    };\n  }\n  render() {\n    return (\n      <div id=\"drum-machine\" class=\"nes-container is-dark is-centered with-title\">\n        <Title title={this.state.title} />\n        <Display display={this.state.display} />\n        <Pannel nesColors={this.state.nesColors} padList={this.state.padList} handleClick={this.handleClick} />\n        <Footer nesURL={this.state.nesURL} reactURL={this.state.reactURL} />\n      </div>\n    );\n  }\n}\n\nconst Title = (props) => {\n  return <p class=\"title\">{props.title}</p>;\n}\nconst Display = (props) => {\n  return <p id=\"display\" class=\"nes-text is-warning\">{props.display}</p>;\n}\nconst Footer = (props) => {\n  return (<footer>made with <i class=\"nes-icon is-small star\"></i>\n    <a id=\"nes\" target=\"_blank\" href={props.nesURL}> NES.css</a>, <a id=\"react\" target=\"_blank\" href={props.reactURL}>React</a></footer>);\n}\nconst Pannel = (props) => {\n  return (<div id=\"pannel\">\n    <DrumPad color={props.nesColors.orange} padInfo={props.padList['1']} handleClick={props.handleClick} />\n    <DrumPad color={props.nesColors.orange} padInfo={props.padList['2']} handleClick={props.handleClick} />\n    <DrumPad color={props.nesColors.orange} padInfo={props.padList['3']} handleClick={props.handleClick} />\n    <DrumPad color={props.nesColors.blue} padInfo={props.padList.Q} handleClick={props.handleClick} />\n    <DrumPad color={props.nesColors.blue} padInfo={props.padList.W} handleClick={props.handleClick} />\n    <DrumPad color={props.nesColors.red} padInfo={props.padList.E} handleClick={props.handleClick} />\n    <DrumPad color={props.nesColors.default} padInfo={props.padList.A} handleClick={props.handleClick} />\n    <DrumPad color={props.nesColors.default} padInfo={props.padList.S} handleClick={props.handleClick} />\n    <DrumPad color={props.nesColors.red} padInfo={props.padList.D} handleClick={props.handleClick} />\n    <DrumPad color={props.nesColors.green} padInfo={props.padList.Z} handleClick={props.handleClick} />\n    <DrumPad color={props.nesColors.default} padInfo={props.padList.X} handleClick={props.handleClick} />\n    <DrumPad color={props.nesColors.orange} padInfo={props.padList.C} handleClick={props.handleClick} />\n  </div>);\n}\nconst DrumPad = (props) => {\n  let classSet = 'drum-pad nes-btn ' + props.color;\n  let id = \"drum-pad-\" + props.padInfo.id;\n  return (<button id={id} class={classSet} onClick={(e) => { props.handleClick(e, props) }}>\n    <audio src={props.padInfo.audioSrc} class=\"clip\" id={props.padInfo.id}></audio>{props.padInfo.id}\n  </button>);\n}\n\nexport default DrumMachine;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport DrumMachine from './DrumMachine';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<DrumMachine />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}